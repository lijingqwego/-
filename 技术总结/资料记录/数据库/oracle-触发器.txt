触发器 trigger
1、触发器简介:
   1-1.触发器一般作用:得到数据变更的日志记录，强制保证数据一致性。
   与存储过程比较类似
   存储过程的调用:由用户、应用程序、触发器等调用
   触发器的触发需要特定的事件
   
   1-2.触发事件 --DDL触发器:sysevent ='create'  DML触发器: if deleting then
   DML操作
   DDL操作
   数据库事件:logon/logoff 用户登录与注销  startup/showdown 数据库的打开和关闭
              errors 特定的错误消息等
   
   1-3.触发器的具体作用:
       自动生成自增长字段        例如在insert操作前给主键自动加值  利用sequence
       执行更复杂的业务逻辑
       防止无意义的数据操作
       提供审计                  就是把修改的数据记录在日志中
       允许或限制修改某些表
       实现完整性规则
       保证数据的同步复制
       
   1-4.触发器的类型    
       数据操纵语言触发器:insert   update  delete
       数据定义语言触发器:create   alter   drop
       复合触发器:在一个触发器中包含其他类型的触发器
       
       instead of 触发器:作用在视图上 
       具有多个源表的视图左DML操作是不允许的，但instead of 触发器可以解决
       可以把对视图的DML操作转换成对多个源表的操作
       
       用户和系统事件触发
       
2、触发器的语法

   2-1.DML触发器语法:
   create or replace trigger 触发器名
   触发时间                触发器事件
   /*
   触发时间: before  after  instead of(替换类型 作用在视图上)
   触发事件见1-2
   */
   on 表名
   for each row        --表示行级触发器 省略则为语句级触发器
        
   begin
   end;  
   
   在删除表emp_a上数据时，在删除前将删除的数据记录到emp_a_history表中
   例:create or replace trigger tri_djl      --创建一个触发器
          before delete                      --在删除事件之前
          on emp_a                           --针对表emp_a
          for each row                       --行级触发器
      
      begin
          if deleting then                   --判断delete事件是否触发
      	  insert into emp_a_history values   --将删除的数据插入到日志表中
      	  (:old.empno,:old.ename);           --:old.列名    引用旧值
      	  end if;                            --:new.列名    应用新值
      end;
      
   判断触发器是否执行: deleting updating inserting
   
   将增删改操作时记录到emp_a_log表中
   创建一个emp_a_log表
      create table emp_a_log
         (trigger_name varchar2(10),
          e_no         number(10),
          e_name       varchar2(10),
          e_date       date
          );
   
   例:create or replace trigger tri_emp
          after insert or update or delete
          on emp_a
          for each row
      begin
        case                                          --case  when then语句
          when deleting then
          insert into emp_a_log 
          values('删除',:old.empno,:old.ename,sysdate);
          
          when inserting then
          insert into emp_a_log
          values('新增前',:old.empno,:old.ename,sysdate);
          insert into emp_a_log
          values('新增后',:new.empno,:new.ename,sysdate);
          
          when updating then
          insert into emp_a_log
          values('更新前',:old.empno,:old.ename,sysdate);
          insert into emp_a_log
          values('更新后',:new.empno,:new.ename,sysdate);
        end case;
      end;
      
      --这样在emp_a 增删改后都能将操作的数据记录下来
   
   使用when限制条件的触发器
   
      create or replace trigger tri_djl
          before insert 
          on djl
          for each row
          when (new.djl_id = 1)                 --when限制条件，不用加‘;’结束
                                                --when中的
      begin
          dbms_output.put_line('当插入djl_id是1的时候才会触发');
      end;         
    
    多个触发器执行的先后顺序:1.before优先  2.语句优先  --行级后执行for each on
    
    2-2.DDL触发器  create alter drop rename  及sysevent使用
    语法:
         create or replace trigger 触发器名
              事件时间    DDL事件/数据库触发事件
              on 模式上/数据库上  --on schema / on datebase  不能使用表名或试图
         begin
         end;
      
    例如:
    create or replace trigger tri_tab                  --创建触发器
        before create or alter or drop or rename       --定义触发事件
        on schema                                      --在当前模式上
    begin
        case sysevent
           when 'create' then
           dbms_output.put_line('表创建中..');
           when 'drop' then
           dbms_output.put_line('表删除中..');
           when 'alter' then
           dbms_output.put_line('表修改中..');
           when 'rename' then
           dbms_output.put_line('表改名中..');
        end case;
    end;                                            --待处理